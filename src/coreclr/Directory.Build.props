<Project>

  <Import Project="..\..\Directory.Build.props" />

  <!-- Set default Configuration and Platform -->
  <PropertyGroup>
    <ArchGroup Condition="'$(__BuildArch)' != ''">$(__BuildArch)</ArchGroup>
    <ArchGroup Condition="'$(ArchGroup)' == ''">x64</ArchGroup>
    <ArchGroup Condition="'$(ArchGroup)' == 'amd64'">x64</ArchGroup>
    <ArchGroup Condition="'$(ArchGroup)' == 'armel'">arm</ArchGroup>
    <TargetArchitecture Condition="'$(TargetArchitecture)' == ''">$(ArchGroup)</TargetArchitecture>

    <OSGroup Condition="'$(__BuildOS)' != ''">$(__BuildOS)</OSGroup>
    <OSGroup Condition="'$(OSGroup)' == '' and '$([MSBuild]::IsOSPlatform(Windows))' == 'true'">Windows_NT</OSGroup>
    <OSGroup Condition="'$(OSGroup)' == '' and '$([MSBuild]::IsOSPlatform(Linux))' == 'true'">Linux</OSGroup>
    <OSGroup Condition="'$(OSGroup)' == '' and '$([MSBuild]::IsOSPlatform(OSX))' == 'true'">OSX</OSGroup>
    <OSGroup Condition="'$(OSGroup)' == ''">AnyOS</OSGroup>
  </PropertyGroup>

  <!--
    If Configuration is empty that means we are not being built in VS and so folks need to explicitly pass the different
    values for $(ConfigurationGroup) or $(OSGroup) or accept the defaults for them.
  -->
  <PropertyGroup Condition="'$(Configuration)' == ''">
    <ConfigurationGroup Condition="'$(__BuildType)' != ''">$(__BuildType)</ConfigurationGroup>
    <ConfigurationGroup Condition="'$(ConfigurationGroup)' == '' or '$(ConfigurationGroup)' == 'debug'">Debug</ConfigurationGroup>
    <ConfigurationGroup Condition="'$(ConfigurationGroup)' == 'release'">Release</ConfigurationGroup>
    <ConfigurationGroup Condition="'$(ConfigurationGroup)' == 'checked'">Checked</ConfigurationGroup>
    <Configuration>$(ConfigurationGroup)</Configuration>
  </PropertyGroup>

  <!--
    If Configuration is set then someone explicitly passed it in or we building from VS. In either case
    default $(ConfigurationGroup) or $(OSGroup) from the Configuration if they aren't
    already explicitly set.
  -->
  <PropertyGroup Condition="'$(Configuration)' != ''">
    <ConfigurationGroup Condition="'$(__BuildType)' != ''">$(__BuildType)</ConfigurationGroup>
    <ConfigurationGroup Condition="'$(ConfigurationGroup)' == '' and $(Configuration.EndsWith('Debug'))">Debug</ConfigurationGroup>
    <ConfigurationGroup Condition="'$(ConfigurationGroup)' == '' and $(Configuration.EndsWith('Release'))">Release</ConfigurationGroup>
    <ConfigurationGroup Condition="'$(ConfigurationGroup)' == '' and $(Configuration.EndsWith('Checked'))">Checked</ConfigurationGroup>
    <ConfigurationGroup Condition="'$(ConfigurationGroup)' == ''">Debug</ConfigurationGroup>

    <OSGroup Condition="$(Configuration.StartsWith('Windows'))">Windows_NT</OSGroup>
    <OSGroup Condition="$(Configuration.StartsWith('Unix'))">Unix</OSGroup>
    <OSGroup Condition="$(Configuration.StartsWith('Linux'))">Linux</OSGroup>
    <OSGroup Condition="$(Configuration.StartsWith('OSX'))">OSX</OSGroup>
    <OSGroup Condition="$(Configuration.StartsWith('FreeBSD'))">FreeBSD</OSGroup>
    <OSGroup Condition="$(Configuration.StartsWith('NetBSD'))">NetBSD</OSGroup>
  </PropertyGroup>

  <!-- Setup Default symbol and optimization for Configuration -->
  <PropertyGroup>
    <!-- Ensure a portable PDB is emitted. A PDB is needed for crossgen. -->
    <DebugType>Portable</DebugType>
    <DebugSymbols>true</DebugSymbols>
  </PropertyGroup>
  <PropertyGroup Condition="'$(ConfigurationGroup)' == 'Debug'">
    <Optimize Condition="'$(Optimize)' == ''">false</Optimize>
    <DefineConstants>$(DefineConstants);DEBUG</DefineConstants>
  </PropertyGroup>
  <PropertyGroup Condition="'$(ConfigurationGroup)' == 'Checked'">
    <Optimize Condition="'$(Optimize)' == ''">true</Optimize>
    <DefineConstants>$(DefineConstants);DEBUG</DefineConstants>
  </PropertyGroup>
  <PropertyGroup Condition="'$(ConfigurationGroup)' == 'Release'">
    <Optimize Condition="'$(Optimize)' == ''">true</Optimize>
  </PropertyGroup>

   <!-- Setup properties per OS -->
  <Choose>
    <When Condition="'$(OSGroup)' == 'AnyOS'">
      <PropertyGroup>
      </PropertyGroup>
    </When>
    <When Condition="'$(OSGroup)' == 'Windows_NT'">
      <PropertyGroup>
        <!-- Since cross compilation of test builds on Windows is possible, the
             TargetsWindows property may already be set. Only set the property if
             it is not already defined -->
        <TargetsWindows Condition="'$(TargetsWindows)' == ''">true</TargetsWindows>
        <TestNugetRuntimeId>win-$(ArchGroup)</TestNugetRuntimeId>
      </PropertyGroup>
    </When>
    <When Condition="'$(OSGroup)' == 'Linux'">
      <PropertyGroup>
        <TargetsUnix>true</TargetsUnix>
        <TargetsLinux>true</TargetsLinux>
        <TestNugetRuntimeId>ubuntu.14.04-$(ArchGroup)</TestNugetRuntimeId>
      </PropertyGroup>
    </When>
    <When Condition="'$(OSGroup)' == 'OSX'">
      <PropertyGroup>
        <TargetsUnix>true</TargetsUnix>
        <TargetsOSX>true</TargetsOSX>
        <TestNugetRuntimeId>osx.10.12-$(ArchGroup)</TestNugetRuntimeId>
      </PropertyGroup>
    </When>
    <When Condition="'$(OSGroup)' == 'FreeBSD'">
      <PropertyGroup>
        <TargetsUnix>true</TargetsUnix>
        <TargetsFreeBSD>true</TargetsFreeBSD>
        <TestNugetRuntimeId>ubuntu.14.04-$(ArchGroup)</TestNugetRuntimeId>
      </PropertyGroup>
    </When>
    <Otherwise>
      <PropertyGroup>
        <ConfigurationErrorMsg>$(ConfigurationErrorMsg);Unknown OSGroup [$(OSGroup)] specificed in your project.</ConfigurationErrorMsg>
      </PropertyGroup>
    </Otherwise>
  </Choose>

  <!-- Set up common target properties that we use to conditionally include sources -->
  <PropertyGroup>
    <!-- We are only tracking Linux Distributions for Nuget RID mapping -->
    <DistroRid Condition="'$(TargetsLinux)' == 'true'">$(__DistroRid)</DistroRid>

    <TargetRid>$(__RuntimeId)</TargetRid>
    <TargetRid Condition="'$(TargetRid)' == ''">$(TestNugetRuntimeId)</TargetRid>

    <!-- Folder for cross target components -->
    <CrossTargetComponentFolder Condition="'$(ArchGroup)' == 'arm64'">x64</CrossTargetComponentFolder>
    <CrossTargetComponentFolder Condition="'$(ArchGroup)' == 'arm' and '$(TargetsWindows)' == 'true'">x86</CrossTargetComponentFolder>
    <CrossTargetComponentFolder Condition="'$(ArchGroup)' == 'arm' and '$(TargetsLinux)' == 'true'">x64</CrossTargetComponentFolder>
  </PropertyGroup>

  <PropertyGroup>
    <OSPlatformConfig>$(OSGroup).$(ArchGroup).$(ConfigurationGroup)</OSPlatformConfig>

    <BinDir>$(ArtifactsBinDir)coreclr\$(OSPlatformConfig)\</BinDir>
    <SourceDir>$(MSBuildThisFileDirectory)src\</SourceDir>
    <PackagesBinDir>$(BinDir).nuget\</PackagesBinDir>

    <BaseRootOutputPath>$(BinDir)</BaseRootOutputPath>
    <BaseOutputPath>$(BaseRootOutputPath)$(MSBuildProjectName)\</BaseOutputPath>
    <OutputPath>$(BaseOutputPath)</OutputPath>
    <BaseRootIntermediateOutputPath>$(ArtifactsObjDir)coreclr\$(OSPlatformConfig)\</BaseRootIntermediateOutputPath>
    <BaseIntermediateOutputPath>$(BaseRootIntermediateOutputPath)$(MSBuildProjectName)\</BaseIntermediateOutputPath>
    <IntermediateOutputPath>$(BaseIntermediateOutputPath)</IntermediateOutputPath>
  </PropertyGroup>

  <!--
    The IL SDK adds a packagereference to the native ilasm package,
    but does not detect musl or rhel, so we set the RID
    ourselves. If we passed in a proper host RID from the build
    scripts, we could also use that instead of relying on the IL
    SDK RID detection.
  -->
  <PropertyGroup>
    <MicrosoftNetCoreIlasmPackageRuntimeId Condition=" '$(TargetRid)' == 'linux-musl-x64' ">$(TargetRid)</MicrosoftNetCoreIlasmPackageRuntimeId>
    <MicrosoftNetCoreIlasmPackageRuntimeId Condition=" '$(TargetRid)' == 'rhel.6-x64' ">$(TargetRid)</MicrosoftNetCoreIlasmPackageRuntimeId>
  </PropertyGroup>

  <PropertyGroup>
    <AppendTargetFrameworkToOutputPath>false</AppendTargetFrameworkToOutputPath>
    <CL_MPCount>$(NumberOfCores)</CL_MPCount>
    <!-- Enables Strict mode for Roslyn compiler -->
    <Features>strict;nullablePublicOnly</Features>
  </PropertyGroup>

  <Import Project="$(MSBuildThisFileDirectory)clr.featuredefines.props" />

</Project>
