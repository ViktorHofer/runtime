<Project>

  <Import Project="..\..\Directory.Build.props" />

  <!-- Set default Configuration and Platform -->
  <PropertyGroup>
    <Platform Condition="'$(__BuildArch)' != ''">$(__BuildArch)</Platform>
    <Platform Condition="'$(Platform)' == '' or '$(Platform)' == 'amd64'">x64</Platform>
    <Platform Condition="'$(Platform)' == 'armel'">arm</Platform>
    <TargetArchitecture Condition="'$(TargetArchitecture)' == ''">$(Platform)</TargetArchitecture>

    <OSGroup Condition="'$(__BuildOS)' != ''">$(__BuildOS)</OSGroup>
    <OSGroup Condition="'$(OSGroup)' == '' and '$([MSBuild]::IsOSPlatform(Windows))' == 'true'">Windows_NT</OSGroup>
    <OSGroup Condition="'$(OSGroup)' == '' and '$([MSBuild]::IsOSPlatform(Linux))' == 'true'">Linux</OSGroup>
    <OSGroup Condition="'$(OSGroup)' == '' and '$([MSBuild]::IsOSPlatform(OSX))' == 'true'">OSX</OSGroup>
    <OSGroup Condition="'$(OSGroup)' == ''">AnyOS</OSGroup>

    <Configuration Condition="'$(__BuildType)' != ''">$(__BuildType)</Configuration>
    <Configuration Condition="'$(Configuration)' == '' or '$(Configuration)' == 'debug'">Debug</Configuration>
    <Configuration Condition="'$(Configuration)' == 'release'">Release</Configuration>
    <Configuration Condition="'$(Configuration)' == 'checked'">Checked</Configuration>
  </PropertyGroup>

  <!-- Setup Default symbol and optimization for Configuration -->
  <PropertyGroup>
    <!-- Ensure a portable PDB is emitted. A PDB is needed for crossgen. -->
    <DebugType>Portable</DebugType>
    <DebugSymbols>true</DebugSymbols>
    <!-- Used by VS configuration manager. -->
    <Configurations>Debug;Release;Checked</Configurations>
    <Platforms>x64;x86;arm;arm64</Platforms>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)' == 'Debug'">
    <Optimize Condition="'$(Optimize)' == ''">false</Optimize>
    <DefineConstants>$(DefineConstants);DEBUG</DefineConstants>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)' == 'Checked'">
    <Optimize Condition="'$(Optimize)' == ''">true</Optimize>
    <DefineConstants>$(DefineConstants);DEBUG</DefineConstants>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)' == 'Release'">
    <Optimize Condition="'$(Optimize)' == ''">true</Optimize>
  </PropertyGroup>

   <!-- Setup properties per OS -->
  <Choose>
    <When Condition="'$(OSGroup)' == 'AnyOS'">
      <PropertyGroup>
      </PropertyGroup>
    </When>
    <When Condition="'$(OSGroup)' == 'Windows_NT'">
      <PropertyGroup>
        <!-- Since cross compilation of test builds on Windows is possible, the
             TargetsWindows property may already be set. Only set the property if
             it is not already defined -->
        <TargetsWindows Condition="'$(TargetsWindows)' == ''">true</TargetsWindows>
        <TestNugetRuntimeId>win-$(Platform)</TestNugetRuntimeId>
      </PropertyGroup>
    </When>
    <When Condition="'$(OSGroup)' == 'Linux'">
      <PropertyGroup>
        <TargetsUnix>true</TargetsUnix>
        <TargetsLinux>true</TargetsLinux>
        <TestNugetRuntimeId>ubuntu.14.04-$(Platform)</TestNugetRuntimeId>
      </PropertyGroup>
    </When>
    <When Condition="'$(OSGroup)' == 'OSX'">
      <PropertyGroup>
        <TargetsUnix>true</TargetsUnix>
        <TargetsOSX>true</TargetsOSX>
        <TestNugetRuntimeId>osx.10.12-$(Platform)</TestNugetRuntimeId>
      </PropertyGroup>
    </When>
    <When Condition="'$(OSGroup)' == 'FreeBSD'">
      <PropertyGroup>
        <TargetsUnix>true</TargetsUnix>
        <TargetsFreeBSD>true</TargetsFreeBSD>
        <TestNugetRuntimeId>ubuntu.14.04-$(Platform)</TestNugetRuntimeId>
      </PropertyGroup>
    </When>
    <Otherwise>
      <PropertyGroup>
        <ConfigurationErrorMsg>$(ConfigurationErrorMsg);Unknown OSGroup [$(OSGroup)] specificed in your project.</ConfigurationErrorMsg>
      </PropertyGroup>
    </Otherwise>
  </Choose>

  <!-- Set up common target properties that we use to conditionally include sources -->
  <PropertyGroup>
    <!-- We are only tracking Linux Distributions for Nuget RID mapping -->
    <DistroRid Condition="'$(TargetsLinux)' == 'true'">$(__DistroRid)</DistroRid>

    <TargetRid>$(__RuntimeId)</TargetRid>
    <TargetRid Condition="'$(TargetRid)' == ''">$(TestNugetRuntimeId)</TargetRid>

    <!-- Folder for cross target components -->
    <CrossTargetComponentFolder Condition="'$(Platform)' == 'arm64'">x64</CrossTargetComponentFolder>
    <CrossTargetComponentFolder Condition="'$(Platform)' == 'arm' and '$(TargetsWindows)' == 'true'">x86</CrossTargetComponentFolder>
    <CrossTargetComponentFolder Condition="'$(Platform)' == 'arm' and '$(TargetsLinux)' == 'true'">x64</CrossTargetComponentFolder>
  </PropertyGroup>

  <PropertyGroup>
    <OSPlatformConfig>$(OSGroup).$(Platform).$(Configuration)</OSPlatformConfig>

    <BinDir>$(ArtifactsBinDir)coreclr\$(OSPlatformConfig)\</BinDir>
    <SourceDir>$(MSBuildThisFileDirectory)src\</SourceDir>
    <PackagesBinDir>$(BinDir).nuget\</PackagesBinDir>

    <BaseRootOutputPath>$(BinDir)</BaseRootOutputPath>
    <BaseOutputPath>$(BaseRootOutputPath)$(MSBuildProjectName)\</BaseOutputPath>
    <OutputPath>$(BaseOutputPath)</OutputPath>
    <BaseRootIntermediateOutputPath>$(ArtifactsObjDir)coreclr\$(OSPlatformConfig)\</BaseRootIntermediateOutputPath>
    <BaseIntermediateOutputPath>$(BaseRootIntermediateOutputPath)$(MSBuildProjectName)\</BaseIntermediateOutputPath>
    <IntermediateOutputPath>$(BaseIntermediateOutputPath)</IntermediateOutputPath>
  </PropertyGroup>

  <!--
    The IL SDK adds a packagereference to the native ilasm package,
    but does not detect musl or rhel, so we set the RID
    ourselves. If we passed in a proper host RID from the build
    scripts, we could also use that instead of relying on the IL
    SDK RID detection.
  -->
  <PropertyGroup>
    <MicrosoftNetCoreIlasmPackageRuntimeId Condition=" '$(TargetRid)' == 'linux-musl-x64' ">$(TargetRid)</MicrosoftNetCoreIlasmPackageRuntimeId>
  </PropertyGroup>

  <PropertyGroup>
    <AppendTargetFrameworkToOutputPath>false</AppendTargetFrameworkToOutputPath>
    <CL_MPCount>$(NumberOfCores)</CL_MPCount>
    <!-- Enables Strict mode for Roslyn compiler -->
    <Features>strict;nullablePublicOnly</Features>
  </PropertyGroup>

  <Import Project="$(MSBuildThisFileDirectory)clr.featuredefines.props" />

</Project>
