<Project>
  <PropertyGroup>
    <!-- Implicit test build support when invoking the Test target on the project directly. -->
    <TestDependsOn Condition="'$(TestNoBuild)' != 'true' and
                              '$(VSTestNoBuild)' != 'true' and
                              '$(BuildAllProjects)' != 'true'">Build</TestDependsOn>
    <TestDependsOn>$(TestDependsOn);RunTests</TestDependsOn>

    <!-- Test runners are built as part of libs.pretest so we need to use libraries configuration -->
    <MobileRunnersDirSuffix>$(NetCoreAppCurrent)-$(Configuration)</MobileRunnersDirSuffix>
    <AppleTestRunnerDir>$([MSBuild]::NormalizeDirectory('$(ArtifactsBinDir)', 'AppleTestRunner', '$(MobileRunnersDirSuffix)'))</AppleTestRunnerDir>
    <AndroidTestRunnerDir>$([MSBuild]::NormalizeDirectory('$(ArtifactsBinDir)', 'AndroidTestRunner', '$(MobileRunnersDirSuffix)'))</AndroidTestRunnerDir>
    <WasmTestRunnerDir>$([MSBuild]::NormalizeDirectory('$(ArtifactsBinDir)', 'WasmTestRunner', '$(MobileRunnersDirSuffix)'))</WasmTestRunnerDir>
    <BundleDir>$([MSBuild]::NormalizeDirectory('$(OutDir)', 'AppBundle'))</BundleDir>

    <RunScriptInputName Condition="'$(TargetOS)' == 'iOS'">AppleRunnerTemplate.sh</RunScriptInputName>
    <RunScriptInputName Condition="'$(TargetOS)' == 'Android'">AndroidRunnerTemplate.sh</RunScriptInputName>
    <RunScriptInputName Condition="'$(TargetOS)' == 'Browser'">WasmRunnerTemplate.sh</RunScriptInputName>
    <RunScriptInputPath>$(MSBuildThisFileDirectory)$(RunScriptInputName)</RunScriptInputPath>

    <RunScriptOutputName Condition="'$(TargetOS)' == 'Windows_NT'">RunTests.cmd</RunScriptOutputName>
    <RunScriptOutputName Condition="'$(TargetOS)' != 'Windows_NT'">RunTests.sh</RunScriptOutputName>
    <RunScriptOutputPath>$([MSBuild]::NormalizePath('$(BundleDir)', '$(RunScriptOutputName)'))</RunScriptOutputPath>

    <RunAOTCompilation Condition="'$(TargetOS)' == 'iOS' and $(TargetArchitecture.StartsWith('arm'))">true</RunAOTCompilation>
    <RuntimeIdentifier>$(PackageRID)</RuntimeIdentifier>
    <SelfContained>true</SelfContained>
  </PropertyGroup>

  <ItemGroup>
    <None Include="$(RunScriptInputPath)"
          CopyToOutputDirectory="PreserveNewest"
          Link="AppBundle\$(RunScriptOutputName)"
          Visible="false" />
  </ItemGroup>

  <!-- Generate a self-contained app bundle for Android with tests. -->
  <UsingTask Condition="'$(TargetOS)' == 'Android'"
             TaskName="AndroidAppBuilderTask"
             AssemblyFile="$(AndroidAppBuilderTasksAssemblyPath)" />

  <Target Name="BundleTestAndroidApp"
          Condition="'$(TargetOS)' == 'Android'">
    <PropertyGroup>
      <AndroidAbi Condition="'$(TargetArchitecture)' == 'arm64'">arm64-v8a</AndroidAbi>
      <AndroidAbi Condition="'$(TargetArchitecture)' == 'arm'">armeabi-v7a</AndroidAbi>
      <AndroidAbi Condition="'$(TargetArchitecture)' == 'x64'">x86_64</AndroidAbi>
      <AndroidAbi Condition="'$(TargetArchitecture)' == 'x86'">x86</AndroidAbi>
    </PropertyGroup>

    <Error Condition="!Exists('$(MicrosoftNetCoreAppRuntimePackRidDir)')" Text="MicrosoftNetCoreAppRuntimePackRidDir=$(MicrosoftNetCoreAppRuntimePackRidDir) doesn't exist" />

    <!-- TEMP: consume OpenSSL binaries from external sources via env. variables -->
    <Copy Condition="'$(ANDROID_OPENSSL_AAR)' != ''"
          SourceFiles="$(ANDROID_OPENSSL_AAR)\prefab\modules\crypto\libs\android.$(AndroidAbi)\libcrypto.so"
          DestinationFolder="$(PublishDir)" SkipUnchangedFiles="true"/>
    <Copy Condition="'$(ANDROID_OPENSSL_AAR)' != ''"
          SourceFiles="$(ANDROID_OPENSSL_AAR)\prefab\modules\ssl\libs\android.$(AndroidAbi)\libssl.so"
          DestinationFolder="$(PublishDir)" SkipUnchangedFiles="true"/>

    <WriteLinesToFile File="$(PublishDir)xunit-excludes.txt" Lines="$(_withoutCategories.Replace(';', '%0dcategory='))" />

    <RemoveDir Directories="$(BundleDir)" />
    <AndroidAppBuilderTask
        Abi="$(AndroidAbi)"
        ProjectName="$(AssemblyName)"
        MonoRuntimeHeaders="$(MicrosoftNetCoreAppRuntimePackNativeDir)include\mono-2.0"
        MainLibraryFileName="AndroidTestRunner.dll"
        StripDebugSymbols="False"
        OutputDir="$(BundleDir)"
        SourceDir="$(PublishDir)">
        <Output TaskParameter="ApkPackageId"  PropertyName="ApkPackageId" />
        <Output TaskParameter="ApkBundlePath" PropertyName="ApkBundlePath" />
    </AndroidAppBuilderTask>
    <Message Importance="High" Text="PackageId:       $(ApkPackageId)"/>
    <Message Importance="High" Text="Instrumentation: net.dot.MonoRunner"/>
    <Message Importance="High" Text="Apk:             $(ApkBundlePath)"/>
  </Target>

  <!-- Generate a self-contained app bundle for iOS with tests. -->
  <UsingTask Condition="'$(TargetOS)' == 'iOS' or '$(TargetOS)' == 'tvOS'"
             TaskName="AppleAppBuilderTask"
             AssemblyFile="$(AppleAppBuilderTasksAssemblyPath)" />
  <UsingTask TaskName="MonoAOTCompiler"
             AssemblyFile="$(MonoAOTCompilerTasksAssemblyPath)" />

  <Import Project="$(MonoAOTCompilerDir)MonoAOTCompiler.props" />

  <Target Name="BundleTestAppleApp"
          Condition="'$(TargetOS)' == 'iOS'" >
    <Error Condition="!Exists('$(MicrosoftNetCoreAppRuntimePackRidDir)')" Text="MicrosoftNetCoreAppRuntimePackRidDir=$(MicrosoftNetCoreAppRuntimePackRidDir) doesn't exist" />
    <Error Condition="('$(TargetArchitecture)' == 'arm64' or '$(TargetArchitecture)' == 'arm') and '$(DevTeamProvisioning)' == ''"
           Text="'DevTeamProvisioning' needs to be set for device builds. Set it to 'UBF8T346G9' if you're part of the Microsoft team account." />
    <Error Condition="'$(TestArchiveTestsDir)' == ''" Text="TestArchiveTestsDir property to archive the test folder must be set." />

    <WriteLinesToFile File="$(PublishDir)xunit-excludes.txt" Lines="$(_withoutCategories.Replace(';', '%0dcategory='))" />

    <ItemGroup>
      <AotInputAssemblies Condition="'$(RunAOTCompilation)' == 'true'" Include="$(PublishDir)*.dll" Exclude="$(PublishDir)System.Runtime.WindowsRuntime.dll">
        <AotArguments>@(MonoAOTCompilerDefaultAotArguments, ';')</AotArguments>
        <ProcessArguments>@(MonoAOTCompilerDefaultProcessArguments, ';')</ProcessArguments>
      </AotInputAssemblies>
      <BundleAssemblies Condition="'$(RunAOTCompilation)' != 'true'" Include="$(PublishDir)*.dll" />
    </ItemGroup>

    <MonoAOTCompiler Condition="'$(RunAOTCompilation)' == 'true'"
        CompilerBinaryPath="$(MicrosoftNetCoreAppRuntimePackNativeDir)cross\mono-aot-cross"
        Mode="Full"
        OutputType="AsmOnly"
        Assemblies="@(AotInputAssemblies)"
        UseLLVM="$(MonoEnableLLVM)"
        LLVMPath="$(MicrosoftNetCoreAppRuntimePackNativeDir)cross">
        <Output TaskParameter="CompiledAssemblies" ItemName="BundleAssemblies" />
    </MonoAOTCompiler>

    <!-- Run App bundler, it uses AOT libs (if needed), link all native bits, compile simple UI (written in ObjC)
         and produce an app bundle (with xcode project) -->
    <RemoveDir Directories="$(BundleDir)" />
    <AppleAppBuilderTask
        Arch="$(TargetArchitecture)"
        ProjectName="$(AssemblyName)"
        MonoRuntimeHeaders="$(MicrosoftNetCoreAppRuntimePackNativeDir)include\mono-2.0"
        Assemblies="@(BundleAssemblies)"
        MainLibraryFileName="AppleTestRunner.dll"
        UseConsoleUITemplate="True"
        GenerateXcodeProject="True"
        BuildAppBundle="True"
        Optimized="True"
        DevTeamProvisioning="$(DevTeamProvisioning)"
        OutputDirectory="$(BundleDir)"
        AppDir="$(PublishDir)">
        <Output TaskParameter="AppBundlePath" PropertyName="AppBundlePath" />
        <Output TaskParameter="XcodeProjectPath" PropertyName="XcodeProjectPath" />
    </AppleAppBuilderTask>
    <Message Importance="High" Text="Xcode: $(XcodeProjectPath)"/>
    <Message Importance="High" Text="App: $(AppBundlePath)"/>

    <ItemGroup>
      <_appFiles Include="$(AppBundlePath)/../**/*" />
    </ItemGroup>

    <Copy SourceFiles="@(_appFiles)"
          DestinationFolder="$(TestArchiveTestsDir)/%(RecursiveDir)"
          SkipUnchangedFiles="true"
          Condition="'$(ArchiveTests)' == 'true' and '$(IgnoreForCI)' != 'true'" />

  </Target>

  <UsingTask TaskName="WasmAppBuilder"
             AssemblyFile="$(WasmAppBuilderTasksAssemblyPath)" />

  <Target Name="BundleTestWasmApp"
          Condition="'$(TargetOS)' == 'Browser'">
    <ItemGroup>
      <WasmSatelliteAssemblies Include="$(PublishDir)*\*.resources.dll" />
      <WasmSatelliteAssemblies>
        <CultureName>$([System.IO.Directory]::GetParent('%(Identity)').Name)</CultureName>
      </WasmSatelliteAssemblies>
    </ItemGroup>
    <ItemGroup>
      <AssemblySearchPaths Include="$(PublishDir)"/>
      <WasmFilesToIncludeInFileSystem Include="@(ContentWithTargetPath)" />
      <WasmFilesToIncludeInFileSystem Include="@(ReferenceCopyLocalPaths)" Condition="'%(ReferenceCopyLocalPaths.BuildReference)' == 'true' and !$([System.String]::new('%(ReferenceCopyLocalPaths.Identity)').EndsWith('.resources.dll'))" />
      <WasmFilesToIncludeInFileSystem Include="@(WasmSatelliteAssemblies)" TargetPath="%(WasmSatelliteAssemblies.CultureName)\%(WasmSatelliteAssemblies.Filename)%(WasmSatelliteAssemblies.Extension)" />
      <!-- Include files specified by test projects from publish dir -->
      <WasmFilesToIncludeInFileSystem Include="@(WasmFilesToIncludeFromPublishDir -> '$(PublishDir)%(Identity)')" />
      <ExtraAssemblies Include="$(PublishDir)$(AssemblyName).dll" />
      <!-- We need these facades for some tests. -->
      <ExtraAssemblies Include="$(PublishDir)mscorlib.dll" />
      <ExtraAssemblies Include="$(PublishDir)System.Drawing.dll" />
    </ItemGroup>
    <Error Condition="!Exists('$(MicrosoftNetCoreAppRuntimePackRidDir)')" Text="MicrosoftNetCoreAppRuntimePackRidDir=$(MicrosoftNetCoreAppRuntimePackRidDir) doesn't exist" />
    <WasmAppBuilder
      AppDir="$(BundleDir)"
      InvariantGlobalization="$(InvariantGlobalization)"
      MicrosoftNetCoreAppRuntimePackDir="$(MicrosoftNetCoreAppRuntimePackRidDir)"
      MainAssembly="$(PublishDir)WasmTestRunner.dll"
      MainJS="$(MonoProjectRoot)\wasm\runtime-test.js"
      ExtraAssemblies="@(ExtraAssemblies)"
      SatelliteAssemblies="@(WasmSatelliteAssemblies)"
      FilesToIncludeInFileSystem="@(WasmFilesToIncludeInFileSystem)"
      AssemblySearchPaths="@(AssemblySearchPaths)" />
  </Target>

  <Target Name="AddTestRunnersToPublishedFiles"
          AfterTargets="ComputeResolvedFilesToPublishList">
    <ItemGroup>
      <_runnerFilesToPublish Include="$(AndroidTestRunnerDir)*" Condition="'$(TargetOS)' == 'Android'" />
      <_runnerFilesToPublish Include="$(AppleTestRunnerDir)*" Condition="'$(TargetOS)' == 'iOS' or '$(TargetOS)' == 'tvOS'" />
      <_runnerFilesToPublish Include="$(WasmTestRunnerDir)*" Condition="'$(TargetOS)' == 'Browser'" />
      <ResolvedFileToPublish Include="@(_runnerFilesToPublish)"
                             RelativePath="%(FileName)%(Extension)"
                             CopyToPublishDirectory="PreserveNewest"
                             PostprocessAssembly="true" />
    </ItemGroup>
  </Target>

  <Target Name="BundleTestApp"
          DependsOnTargets="BundleTestAppleApp;
                            BundleTestAndroidApp;
                            BundleTestWasmApp"
          BeforeTargets="ArchiveTests"
          AfterTargets="Publish"
          Condition="'$(IsCrossTargetingBuild)' != 'true'" />

  <Target Name="RunTests"
          DependsOnTargets="CopyRunScript">
    <PropertyGroup>
      <RunTestsCommand>"$(RunScriptOutputPath)"</RunTestsCommand>
      <RunTestsCommand Condition="'$(TargetOS)' != 'Browser'">$(RunTestsCommand) $(AssemblyName) $(TargetArchitecture)</RunTestsCommand>
      <RunTestsCommand Condition="'$(TargetOS)' == 'Browser'">$(RunTestsCommand) $(AssemblyName) "$(JSEngine)" "$(JSEngineArgs)" "$(_withCategories.Replace(';', ' -trait category='))$(_withoutCategories.Replace(';', ' -notrait category='))"</RunTestsCommand>

      <RunTestsEnvironmentVariables Condition="'$(MonoEnvOptions)' != ''">$(RunTestsEnvironmentVariables);MONO_ENV_OPTIONS=$(MonoEnvOptions)</RunTestsEnvironmentVariables>
    </PropertyGroup>

    <!-- Invoke the run script with the test host as the runtime path. -->
    <Exec Command="$(RunTestsCommand)"
          ContinueOnError="true"
          IgnoreExitCode="true"
          IgnoreStandardErrorWarningFormat="true"
          EnvironmentVariables="$(RunTestsEnvironmentVariables)">
      <Output PropertyName="TestRunExitCode" TaskParameter="ExitCode" />
    </Exec>

    <PropertyGroup Condition="'$(TestRunExitCode)' != '0'">
      <TestResultsPath>$(OutputPath)$(TestResultsName)</TestResultsPath>
      <TestRunErrorMessage>One or more tests failed while running tests from '$(TestProjectName)'.</TestRunErrorMessage>
      <TestRunErrorMessage Condition="Exists('$(TestResultsPath)')">$(TestRunErrorMessage) Please check $(TestResultsPath) for details!</TestRunErrorMessage>
    </PropertyGroup>

    <Error Condition="'$(TestRunExitCode)' != '0'" Text="$(TestRunErrorMessage)" />
  </Target>

  <!-- Overwrite the VSTest target to make "dotnet test" the entry point. -->
  <Target Name="VSTest" DependsOnTargets="$(TestDependsOn)" />
</Project>
